cmake_minimum_required(VERSION 3.26)



set(ENGINE_PROJECT_NAME 3D_Engine_Core)



set(JSON_BuildTests OFF CACHE INTERNAL "")

set(ASSIMP_BUILD_TESTS ON)
set(ASSIMP_INSTALL OFF)
set(BUILD_SHARED_LIBS OFF)



set(ENGINE_PUBLIC_HEADERS

		include/engine/application.hpp
		include/engine/names_settings.hpp
		include/engine/application_settings.hpp



		include/engine/error/application_error.hpp
		
		
		
		include/engine/logging/log.hpp
		
		
		
		include/engine/util/nocopyeble.hpp
		include/engine/util/noconstructible.hpp
		include/engine/util/nomoveble.hpp
		include/engine/util/file_reader.hpp



		include/engine/interfaces/binded_object.hpp
		include/engine/interfaces/usage_object.hpp



		include/engine/input/keys.hpp
		include/engine/input/keyboard.hpp
		include/engine/input/mouse.hpp
)

set(ENGINE_PRIVATE_HEADERS

		include/engine/error/window_error.hpp



		include/engine/window/common_types.hpp
		include/engine/window/events_data.hpp
		include/engine/window/basic_window_context.hpp
		include/engine/window/basic_window.hpp
		include/engine/window/windows_collector.hpp
		include/engine/window/windows_manager.hpp
		
		include/engine/window/glfw/glfw.hpp
		include/engine/window/glfw/glfw_window_context.hpp
		include/engine/window/glfw/glfw_window.hpp
		


		include/engine/scene/world_data.hpp



		include/engine/render/common_types.hpp
		include/engine/render/frustum.hpp
		include/engine/render/model.hpp
		include/engine/render/image.hpp
		include/engine/render/basic_texture2D.hpp
		include/engine/render/texture_parametrs.hpp
		include/engine/render/basic_shader_program.hpp
		include/engine/render/basic_renderer.hpp

		include/engine/render/shaders/shader_constructor.hpp
		include/engine/render/shaders/basic_shader.hpp
		include/engine/render/shaders/default_shader.hpp
		
		include/engine/render/meshes/basic_mesh.hpp
		include/engine/render/meshes/open_gl/mesh.hpp
		
		include/engine/render/materials/basic_material.hpp
		include/engine/render/materials/open_gl/material.hpp

		include/engine/render/open_gl/gl_types.hpp
		include/engine/render/open_gl/basic_open_gl_buffer.hpp
		include/engine/render/open_gl/index_buffer.hpp
		include/engine/render/open_gl/vertex_buffer.hpp
		include/engine/render/open_gl/vertex_array.hpp
		include/engine/render/open_gl/buffer_layout.hpp
		include/engine/render/open_gl/texture2D.hpp
		include/engine/render/open_gl/shader_program.hpp
		include/engine/render/open_gl/renderer_open_gl.hpp

		include/engine/render/camera.hpp



		include/engine/modules/basic_UIModule.hpp
		include/engine/modules/imgui/UIModule.hpp



		include/engine/models/cube.hpp
)

set(ENGINE_ECS_PRIVATE_HEADERS

		include/engine/ecs/ecs.hpp
		include/engine/ecs/ecs_system.hpp

		include/engine/ecs/entities/basic_entity.hpp
		include/engine/ecs/entities/entities_manager.hpp



		include/engine/ecs/components/basic_component.hpp
		include/engine/ecs/components/component_iterator.hpp
		include/engine/ecs/components/components_manager.hpp

		include/engine/ecs/components/markers/active_camera.hpp

		include/engine/ecs/components/physic/position.hpp
		include/engine/ecs/components/physic/rotation.hpp
		include/engine/ecs/components/physic/scale.hpp
		include/engine/ecs/components/physic/velocity.hpp
		include/engine/ecs/components/physic/transform.hpp
		include/engine/ecs/components/physic/move_camera_component.hpp

		include/engine/ecs/components/render/transform_camera_component.hpp
		include/engine/ecs/components/render/vision_component.hpp
		include/engine/ecs/components/render/mesh_component.hpp
		include/engine/ecs/components/render/material_component.hpp
		include/engine/ecs/components/render/render_component.hpp	
	
		include/engine/ecs/components/render/light/light_component.hpp
		include/engine/ecs/components/render/light/direction_light_component.hpp



		include/engine/ecs/systems/basic_system.hpp
		include/engine/ecs/systems/render_system.hpp
		include/engine/ecs/systems/move_camera_system.hpp
		include/engine/ecs/systems/systems_manager.hpp
)

set(ENGINE_PRIVATE_SOURCES 

		src/engine/application.cpp
		src/engine/application_settings.cpp



		src/engine/window/basic_window_context.cpp
		src/engine/window/basic_window.cpp
		src/engine/window/windows_collector.cpp
		src/engine/window/windows_manager.cpp

		src/engine/window/glfw/glfw.cpp
		src/engine/window/glfw/glfw_window_context.cpp
		src/engine/window/glfw/glfw_window.cpp



		src/engine/render/model.cpp
		src/engine/render/image.cpp
		src/engine/render/basic_texture2D.cpp
		src/engine/render/basic_shader_program.cpp
		src/engine/render/basic_renderer.cpp

		src/engine/render/meshes/basic_mesh.cpp
		src/engine/render/meshes/open_gl/mesh.cpp

		src/engine/render/materials/basic_material.cpp
		src/engine/render/materials/open_gl/material.cpp
		
		src/engine/render/shaders/basic_shader.cpp
		src/engine/render/shaders/default_shader.cpp

		src/engine/render/open_gl/basic_open_gl_buffer.cpp
		src/engine/render/open_gl/vertex_buffer.cpp
		src/engine/render/open_gl/index_buffer.cpp
		src/engine/render/open_gl/buffer_layout.cpp
		src/engine/render/open_gl/vertex_array.cpp
		src/engine/render/open_gl/texture2D.cpp
		src/engine/render/open_gl/shader_program.cpp
		src/engine/render/open_gl/renderer_open_gl.cpp

		src/engine/render/camera.cpp



		src/engine/modules/basic_UIModule.cpp
		src/engine/modules/imgui/UIModule.cpp



		src/engine/input/keyboard.cpp
		src/engine/input/mouse.cpp



		src/engine/util/file_reader.cpp
)

set(ENGINE_ECS_PRIVATE_SOURCES

		src/engine/ecs/ecs_system.cpp

		src/engine/ecs/entities/basic_entity.cpp
		src/engine/ecs/entities/entities_manager.cpp



		src/engine/ecs/components/basic_component.cpp
		src/engine/ecs/components/components_manager.cpp

		src/engine/ecs/components/physic/position.cpp
		src/engine/ecs/components/physic/rotation.cpp
		src/engine/ecs/components/physic/scale.cpp
		src/engine/ecs/components/physic/velocity.cpp
		src/engine/ecs/components/physic/transform.cpp
		src/engine/ecs/components/physic/move_camera_component.cpp

		src/engine/ecs/components/render/transform_camera_component.cpp
		src/engine/ecs/components/render/vision_component.cpp
		src/engine/ecs/components/render/mesh_component.cpp
		src/engine/ecs/components/render/material_component.cpp
		src/engine/ecs/components/render/render_component.cpp
		
		src/engine/ecs/components/render/light/light_component.cpp
		src/engine/ecs/components/render/light/direction_light_component.cpp



		src/engine/ecs/systems/basic_system.cpp
		src/engine/ecs/systems/render_system.cpp
		src/engine/ecs/systems/move_camera_system.cpp
		src/engine/ecs/systems/systems_manager.cpp
)

set(ENGINE_SHADER_SORCES
		res/shaders/VertexShader.glsl
		res/shaders/FragmentShader.glsl
)


set(ENGINE_ALL_SOURCES
		${ENGINE_PUBLIC_HEADERS}
		${ENGINE_PRIVATE_HEADERS}
		${ENGINE_ECS_PRIVATE_HEADERS}
		${ENGINE_PRIVATE_SOURCES}
		${ENGINE_ECS_PRIVATE_SOURCES}
)

set(ENGINE_ALL_FILES
		${ENGINE_ALL_SOURCES}
		${ENGINE_SHADER_SORCES}
)



source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ENGINE_ALL_FILES})



add_library(${ENGINE_PROJECT_NAME} STATIC
		${ENGINE_ALL_SOURCES}
)



target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC include/)



target_compile_features(${ENGINE_PROJECT_NAME} PUBLIC cxx_std_17)



add_subdirectory(../external/glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glfw)

add_subdirectory(../external/spdlog ${CMAKE_CURRENT_BINARY_DIR}/spdlog)
target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC spdlog)

add_subdirectory(../external/glad ${CMAKE_CURRENT_BINARY_DIR}/glad)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glad)

add_subdirectory(../external/glm ${CMAKE_CURRENT_BINARY_DIR}/glm)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glm)

add_subdirectory(../external/imgui ${CMAKE_CURRENT_BINARY_DIR}/imgui)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE imgui)

add_subdirectory(../external/stb ${CMAKE_CURRENT_BINARY_DIR}/stb)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE stb)

add_subdirectory(../external/assimp ${CMAKE_CURRENT_BINARY_DIR}/assimp)
target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC assimp)

add_subdirectory(../external/json ${CMAKE_CURRENT_BINARY_DIR}/json)
target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC nlohmann_json::nlohmann_json)