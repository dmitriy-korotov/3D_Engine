cmake_minimum_required(VERSION 3.26)



set(ENGINE_PROJECT_NAME 3D_Engine_Core)



set(ENGINE_PUBLIC_HEADERS

		include/engine/application.hpp

		include/engine/error/application_error.hpp
		include/engine/logging/log.hpp
		
		include/engine/util/nocopyeble.hpp
		include/engine/util/noconstructible.hpp
		include/engine/util/nomoveble.hpp

		include/engine/util/file_reader.hpp

		include/engine/interfaces/binded_object.hpp

		include/engine/input/keys.hpp
		include/engine/input/keyboard.hpp
		include/engine/input/mouse.hpp
)

set(ENGINE_PRIVATE_HEADERS

		include/engine/image.hpp

		include/engine/error/window_error.hpp

		include/engine/window/basic_window.hpp
		
		include/engine/window/glfw/glfw_window.hpp
		include/engine/window/glfw/events_data.hpp
		include/engine/window/glfw/windows_collector.hpp
		include/engine/window/glfw/windows_manager.hpp

		include/engine/render/open_gl/gl_types.hpp

		include/engine/render/open_gl/basic_open_gl_buffer.hpp
		include/engine/render/open_gl/index_buffer.hpp
		include/engine/render/open_gl/vertex_buffer.hpp
		include/engine/render/open_gl/vertex_array.hpp
		include/engine/render/open_gl/buffer_layout.hpp

		include/engine/render/texture_parametrs.hpp
		include/engine/render/open_gl/texture2D.hpp

		include/engine/render/open_gl/shader_program.hpp
		include/engine/render/open_gl/renderer_open_gl.hpp

		include/engine/render/camera.hpp

		include/engine/modules/imgui/UIModule.hpp
)

set(ENGINE_ECS_PRIVATE_HEADERS

		include/engine/ecs/ecs.hpp
		include/engine/ecs/ecs_system.hpp

		include/engine/ecs/entities/basic_entity.hpp
		include/engine/ecs/entities/entity_manager.hpp

		include/engine/ecs/components/basic_component.hpp

		include/engine/ecs/systems/basic_system.hpp
		include/engine/ecs/systems/systems_manager.hpp
)

set(ENGINE_PRIVATE_SOURCES 

		src/engine/application.cpp

		src/engine/image.cpp

		src/engine/window/basic_window.cpp

		src/engine/window/glfw/glfw_window.cpp
		src/engine/window/glfw/windows_collector.cpp
		src/engine/window/glfw/windows_manager.cpp

		src/engine/render/open_gl/basic_open_gl_buffer.cpp
		src/engine/render/open_gl/vertex_buffer.cpp
		src/engine/render/open_gl/index_buffer.cpp
		src/engine/render/open_gl/buffer_layout.cpp
		src/engine/render/open_gl/vertex_array.cpp

		src/engine/render/open_gl/texture2D.cpp
		
		src/engine/render/open_gl/shader_program.cpp
		src/engine/render/open_gl/renderer_open_gl.cpp

		src/engine/render/camera.cpp

		src/engine/modules/imgui/UIModule.cpp

		src/engine/input/keyboard.cpp
		src/engine/input/mouse.cpp

		src/engine/util/file_reader.cpp
)

set(ENGINE_ECS_PRIVATE_SOURCES

		src/engine/ecs/entities/basic_entity.cpp
		src/engine/ecs/entities/entity_manager.cpp

		src/engine/ecs/systems/systems_manager.cpp
)

set(ENGINE_SHADER_SORCES
		res/shaders/VertexShader.glsl
		res/shaders/FragmentShader.glsl
)


set(ENGINE_ALL_SOURCES
		${ENGINE_PUBLIC_HEADERS}
		${ENGINE_PRIVATE_HEADERS}
		${ENGINE_ECS_PRIVATE_HEADERS}
		${ENGINE_PRIVATE_SOURCES}
		${ENGINE_ECS_PRIVATE_SOURCES}
)

set(ENGINE_ALL_FILES
		${ENGINE_ALL_SOURCES}
		${ENGINE_SHADER_SORCES}
)



source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${ENGINE_ALL_FILES})



add_library(${ENGINE_PROJECT_NAME} STATIC
		${ENGINE_ALL_SOURCES}
)



target_include_directories(${ENGINE_PROJECT_NAME} PUBLIC include/)



target_compile_features(${ENGINE_PROJECT_NAME} PUBLIC cxx_std_17)



add_subdirectory(../external/glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glfw)

add_subdirectory(../external/spdlog ${CMAKE_CURRENT_BINARY_DIR}/spdlog)
target_link_libraries(${ENGINE_PROJECT_NAME} PUBLIC spdlog)

add_subdirectory(../external/glad ${CMAKE_CURRENT_BINARY_DIR}/glad)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glad)

add_subdirectory(../external/glm ${CMAKE_CURRENT_BINARY_DIR}/glm)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE glm)

add_subdirectory(../external/imgui ${CMAKE_CURRENT_BINARY_DIR}/imgui)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE imgui)

add_subdirectory(../external/stb ${CMAKE_CURRENT_BINARY_DIR}/stb)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE stb)

add_subdirectory(../external/assimp ${CMAKE_CURRENT_BINARY_DIR}/assimp)
target_link_libraries(${ENGINE_PROJECT_NAME} PRIVATE assimp)